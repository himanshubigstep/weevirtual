import { Injectable, Inject, NgModule, Component, defineInjectable, inject } from '@angular/core';
import { checkSystemRequirements, getDevices, createClient, createStream, Logger } from 'agora-rtc-sdk';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function AgoraLocalComponent_i_4_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 8);
    ɵngcc0.ɵɵlistener("click", function AgoraLocalComponent_i_4_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.startCall(); });
    ɵngcc0.ɵɵtext(1, "videocam");
    ɵngcc0.ɵɵelementEnd();
} }
function AgoraLocalComponent_ng_container_5_i_1_Template(rf, ctx) { if (rf & 1) {
    const _r11 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 11);
    ɵngcc0.ɵɵlistener("click", function AgoraLocalComponent_ng_container_5_i_1_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r11); const ctx_r10 = ɵngcc0.ɵɵnextContext(2); return ctx_r10.leave(); });
    ɵngcc0.ɵɵtext(1, "phone");
    ɵngcc0.ɵɵelementEnd();
} }
function AgoraLocalComponent_ng_container_5_i_2_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 12);
    ɵngcc0.ɵɵlistener("click", function AgoraLocalComponent_ng_container_5_i_2_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(2); return ctx_r12.toggleAudio(); });
    ɵngcc0.ɵɵtext(1, "mic");
    ɵngcc0.ɵɵelementEnd();
} }
function AgoraLocalComponent_ng_container_5_i_3_Template(rf, ctx) { if (rf & 1) {
    const _r15 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 12);
    ɵngcc0.ɵɵlistener("click", function AgoraLocalComponent_ng_container_5_i_3_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r15); const ctx_r14 = ɵngcc0.ɵɵnextContext(2); return ctx_r14.toggleAudio(); });
    ɵngcc0.ɵɵtext(1, "mic_off");
    ɵngcc0.ɵɵelementEnd();
} }
function AgoraLocalComponent_ng_container_5_i_4_Template(rf, ctx) { if (rf & 1) {
    const _r17 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 12);
    ɵngcc0.ɵɵlistener("click", function AgoraLocalComponent_ng_container_5_i_4_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r17); const ctx_r16 = ɵngcc0.ɵɵnextContext(2); return ctx_r16.toggleVideo(); });
    ɵngcc0.ɵɵtext(1, "videocam");
    ɵngcc0.ɵɵelementEnd();
} }
function AgoraLocalComponent_ng_container_5_i_5_Template(rf, ctx) { if (rf & 1) {
    const _r19 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "i", 12);
    ɵngcc0.ɵɵlistener("click", function AgoraLocalComponent_ng_container_5_i_5_Template_i_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r19); const ctx_r18 = ɵngcc0.ɵɵnextContext(2); return ctx_r18.toggleVideo(); });
    ɵngcc0.ɵɵtext(1, "videocam_off");
    ɵngcc0.ɵɵelementEnd();
} }
function AgoraLocalComponent_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtemplate(1, AgoraLocalComponent_ng_container_5_i_1_Template, 2, 0, "i", 9);
    ɵngcc0.ɵɵtemplate(2, AgoraLocalComponent_ng_container_5_i_2_Template, 2, 0, "i", 10);
    ɵngcc0.ɵɵtemplate(3, AgoraLocalComponent_ng_container_5_i_3_Template, 2, 0, "i", 10);
    ɵngcc0.ɵɵtemplate(4, AgoraLocalComponent_ng_container_5_i_4_Template, 2, 0, "i", 10);
    ɵngcc0.ɵɵtemplate(5, AgoraLocalComponent_ng_container_5_i_5_Template, 2, 0, "i", 10);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.activeCall);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.audioEnabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.audioEnabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.videoEnabled);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r1.videoEnabled);
} }
function AgoraLocalComponent_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 13);
} if (rf & 2) {
    const remote_r20 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("id", remote_r20);
} }
class AgoraConfig {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularAgoraRtcService {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        if (!this.checkSystemRequirements()) {
            this.logger('error', 'Web RTC is not supported');
        }
        else {
            this.getDevices();
        }
    }
    /**
     * @return {?}
     */
    checkSystemRequirements() {
        return checkSystemRequirements();
    }
    /**
     * @return {?}
     */
    getDevices() {
        getDevices((devices) => {
            /** @type {?} */
            let audioDevices = devices.filter(device => {
                return device.kind === 'audioinput' && device.deviceId !== 'default';
            });
            /** @type {?} */
            let videoDevices = devices.filter(device => {
                return device.kind === 'videoinput' && device.deviceId !== 'default';
            });
            this.audioDevices = audioDevices;
            this.videoDevices = videoDevices;
        });
    }
    /**
     * @param {?=} mode
     * @return {?}
     */
    createClient(mode = 'interop') {
        this.client = createClient({ mode: mode });
        this.client.init(this.config.AppID);
    }
    /**
     * @param {?} streamID
     * @param {?} audio
     * @param {?=} cameraId
     * @param {?=} microphoneId
     * @param {?=} video
     * @param {?=} screen
     * @return {?}
     */
    createStream(streamID, audio, cameraId = this.videoDevices[0].deviceId, microphoneId = this.audioDevices[0].deviceId, video, screen) {
        return createStream({ streamID, audio, cameraId, microphoneId, video, screen });
    }
    /**
     * @param {?} type
     * @param {?} message
     * @return {?}
     */
    logger(type, message) {
        switch (type) {
            case 'error':
                Logger.error(message);
                break;
            case 'warning':
                Logger.warning(message);
                break;
            case 'info':
                Logger.info(message);
                break;
            case 'debug':
                Logger.debug(message);
                break;
            default:
                Logger.error(message);
        }
    }
}
AngularAgoraRtcService.ɵfac = function AngularAgoraRtcService_Factory(t) { return new (t || AngularAgoraRtcService)(ɵngcc0.ɵɵinject('config')); };
AngularAgoraRtcService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: AngularAgoraRtcService, factory: AngularAgoraRtcService.ɵfac, providedIn: 'root' });
/** @nocollapse */
AngularAgoraRtcService.ctorParameters = () => [
    { type: AgoraConfig, decorators: [{ type: Inject, args: ['config',] }] }
];
/** @nocollapse */ AngularAgoraRtcService.ngInjectableDef = defineInjectable({ factory: function AngularAgoraRtcService_Factory() { return new AngularAgoraRtcService(inject("config")); }, token: AngularAgoraRtcService, providedIn: "root" });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularAgoraRtcService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: AgoraConfig, decorators: [{
                type: Inject,
                args: ['config']
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AgoraLocalComponent {
    /**
     * @param {?} agoraService
     */
    constructor(agoraService) {
        this.agoraService = agoraService;
        this.activeCall = false;
        this.audioEnabled = true;
        this.videoEnabled = true;
        this.remoteCalls = [];
        this.agoraService.createClient();
    }
    /**
     * @return {?}
     */
    startCall() {
        this.activeCall = true;
        this.agoraService.client.join(null, '1000', null, (uid) => {
            this.localStream = this.agoraService.createStream(uid, true, null, null, true, false);
            this.localStream.setVideoProfile('720p_3');
            this.subscribeToStreams();
        });
    }
    /**
     * @return {?}
     */
    subscribeToStreams() {
        this.localStream.on("accessAllowed", () => {
            console.log("accessAllowed");
        });
        // The user has denied access to the camera and mic.
        this.localStream.on("accessDenied", () => {
            console.log("accessDenied");
        });
        this.localStream.init(() => {
            console.log("getUserMedia successfully");
            this.localStream.play('agora_local');
            this.agoraService.client.publish(this.localStream, function (err) {
                console.log("Publish local stream error: " + err);
            });
            this.agoraService.client.on('stream-published', function (evt) {
                console.log("Publish local stream successfully");
            });
        }, function (err) {
            console.log("getUserMedia failed", err);
        });
        this.agoraService.client.on('error', (err) => {
            console.log("Got error msg:", err.reason);
            if (err.reason === 'DYNAMIC_KEY_TIMEOUT') {
                this.agoraService.client.renewChannelKey("", () => {
                    console.log("Renew channel key successfully");
                }, (err) => {
                    console.log("Renew channel key failed: ", err);
                });
            }
        });
        this.agoraService.client.on('stream-added', (evt) => {
            /** @type {?} */
            const stream = evt.stream;
            this.agoraService.client.subscribe(stream, (err) => {
                console.log("Subscribe stream failed", err);
            });
        });
        this.agoraService.client.on('stream-subscribed', (evt) => {
            /** @type {?} */
            const stream = evt.stream;
            if (!this.remoteCalls.includes(`agora_remote${stream.getId()}`))
                this.remoteCalls.push(`agora_remote${stream.getId()}`);
            setTimeout(() => stream.play(`agora_remote${stream.getId()}`), 2000);
        });
        this.agoraService.client.on('stream-removed', (evt) => {
            /** @type {?} */
            const stream = evt.stream;
            stream.stop();
            this.remoteCalls = this.remoteCalls.filter(call => call !== `#agora_remote${stream.getId()}`);
            console.log(`Remote stream is removed ${stream.getId()}`);
        });
        this.agoraService.client.on('peer-leave', (evt) => {
            /** @type {?} */
            const stream = evt.stream;
            if (stream) {
                stream.stop();
                this.remoteCalls = this.remoteCalls.filter(call => call === `#agora_remote${stream.getId()}`);
                console.log(`${evt.uid} left from this channel`);
            }
        });
    }
    /**
     * @return {?}
     */
    leave() {
        this.agoraService.client.leave(() => {
            this.activeCall = false;
            document.getElementById('agora_local').innerHTML = "";
            console.log("Leavel channel successfully");
        }, (err) => {
            console.log("Leave channel failed");
        });
    }
    /**
     * @return {?}
     */
    toggleAudio() {
        this.audioEnabled = !this.audioEnabled;
        if (this.audioEnabled)
            this.localStream.enableAudio();
        else
            this.localStream.disableAudio();
    }
    /**
     * @return {?}
     */
    toggleVideo() {
        this.videoEnabled = !this.videoEnabled;
        if (this.videoEnabled)
            this.localStream.enableVideo();
        else
            this.localStream.disableVideo();
    }
}
AgoraLocalComponent.ɵfac = function AgoraLocalComponent_Factory(t) { return new (t || AgoraLocalComponent)(ɵngcc0.ɵɵdirectiveInject(AngularAgoraRtcService)); };
AgoraLocalComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AgoraLocalComponent, selectors: [["agora-rtc"]], decls: 8, vars: 3, consts: [[1, "video-container"], [1, "call-container"], [1, "agora_local"], [1, "video-buttons"], ["class", "startCall material-icons", 3, "click", 4, "ngIf"], [4, "ngIf"], ["id", "agora_local"], ["class", "agora_remote", 3, "id", 4, "ngFor", "ngForOf"], [1, "startCall", "material-icons", 3, "click"], ["class", "endCall material-icons", 3, "click", 4, "ngIf"], ["class", "mic material-icons", 3, "click", 4, "ngIf"], [1, "endCall", "material-icons", 3, "click"], [1, "mic", "material-icons", 3, "click"], [1, "agora_remote", 3, "id"]], template: function AgoraLocalComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵelement(1, "div", 1);
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵtemplate(4, AgoraLocalComponent_i_4_Template, 2, 0, "i", 4);
        ɵngcc0.ɵɵtemplate(5, AgoraLocalComponent_ng_container_5_Template, 6, 5, "ng-container", 5);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(6, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(7, AgoraLocalComponent_div_7_Template, 1, 1, "div", 7);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(4);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.activeCall);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.activeCall);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.remoteCalls);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf], styles: ["@import url(https://fonts.googleapis.com/icon?family=Material+Icons);p[_ngcontent-%COMP%]{font-family:Lato}.video-container[_ngcontent-%COMP%]{height:100vh;display:flex;flex-wrap:wrap;flex-direction:row;justify-content:center}.agora_local[_ngcontent-%COMP%]{background-color:#404040;height:250px;width:250px;border:1px solid #000;margin:8px}#agora_local[_ngcontent-%COMP%]{height:250px;width:250px;top:-28px}.agora_remote[_ngcontent-%COMP%]{background-color:#404040;height:250px;width:250px;border:1px solid #000;margin:8px}.video-buttons[_ngcontent-%COMP%]{width:250px;top:210px;position:relative;text-align:center;z-index:999}.video-buttons[_ngcontent-%COMP%]   i[_ngcontent-%COMP%]{cursor:pointer}.endCall[_ngcontent-%COMP%]{color:red}.mic[_ngcontent-%COMP%], .startCall[_ngcontent-%COMP%]{color:#fff}"] });
/** @nocollapse */
AgoraLocalComponent.ctorParameters = () => [
    { type: AngularAgoraRtcService }
];
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgoraLocalComponent, [{
        type: Component,
        args: [{
                selector: 'agora-rtc',
                template: `<div class="video-container">
	<div class="call-container">
	</div>
	<div class="agora_local">
		<div class="video-buttons">
			<i class="startCall material-icons" (click)="startCall()" *ngIf="!activeCall">videocam</i>
			<ng-container *ngIf="activeCall">
				<i class="endCall material-icons" (click)="leave()" *ngIf="activeCall">phone</i>

				<i class="mic material-icons" (click)="toggleAudio()" *ngIf="audioEnabled">mic</i>
				<i class="mic material-icons" (click)="toggleAudio()" *ngIf="!audioEnabled">mic_off</i>

				<i class="mic material-icons" (click)="toggleVideo()" *ngIf="videoEnabled">videocam</i>
				<i class="mic material-icons" (click)="toggleVideo()" *ngIf="!videoEnabled">videocam_off</i>
			</ng-container>
		</div>
		<div id="agora_local"></div>
	</div>
	<div class="agora_remote" *ngFor="let remote of remoteCalls" [id]="remote">

	</div>
</div>`,
                styles: [`@import url(https://fonts.googleapis.com/icon?family=Material+Icons);p{font-family:Lato}.video-container{height:100vh;display:flex;flex-wrap:wrap;flex-direction:row;justify-content:center}.agora_local{background-color:#404040;height:250px;width:250px;border:1px solid #000;margin:8px}#agora_local{height:250px;width:250px;top:-28px}.agora_remote{background-color:#404040;height:250px;width:250px;border:1px solid #000;margin:8px}.video-buttons{width:250px;top:210px;position:relative;text-align:center;z-index:999}.video-buttons i{cursor:pointer}.endCall{color:red}.mic,.startCall{color:#fff}`]
            }]
    }], function () { return [{ type: AngularAgoraRtcService }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AngularAgoraRtcModule {
    /**
     * @param {?} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: AngularAgoraRtcModule,
            providers: [AngularAgoraRtcService, { provide: 'config', useValue: config }]
        };
    }
}
AngularAgoraRtcModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularAgoraRtcModule });
AngularAgoraRtcModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularAgoraRtcModule_Factory(t) { return new (t || AngularAgoraRtcModule)(); }, imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularAgoraRtcModule, { declarations: function () { return [AgoraLocalComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AgoraLocalComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularAgoraRtcModule, [{
        type: NgModule,
        args: [{
                imports: [
                    CommonModule
                ],
                declarations: [AgoraLocalComponent],
                exports: [AgoraLocalComponent]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class AgoraClient {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Stream {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
class Device {
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { AngularAgoraRtcService, AgoraLocalComponent, AngularAgoraRtcModule, AgoraClient, Stream, Device, AgoraConfig };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,