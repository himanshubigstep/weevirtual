import { Pipe, EventEmitter, Directive, Input, Output, Component, ViewChildren, ElementRef, Renderer2, NgModule } from '@angular/core';
import { FormGroup, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { Subject, Subscription, timer } from 'rxjs';
import { switchMap, take, tap } from 'rxjs/operators';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
import * as ɵngcc2 from '@angular/forms';

function OtpInputComponent_div_0_input_1_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "input", 6);
    ɵngcc0.ɵɵlistener("keyup", function OtpInputComponent_div_0_input_1_Template_input_keyup_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r6); const i_r4 = ctx.index; const ctx_r5 = ɵngcc0.ɵɵnextContext(2); return ctx_r5.keyUp($event, i_r4); });
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const item_r3 = ctx.$implicit;
    const i_r4 = ctx.index;
    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵclassMapInterpolate1("otp-input ", ctx_r1.setting.inputClass, "");
    ɵngcc0.ɵɵpropertyInterpolate2("id", "otp_", i_r4, "_", ctx_r1.componentKey, "");
    ɵngcc0.ɵɵproperty("type", ctx_r1.setting.numbersOnly ? "tel" : "text")("disabledNumberOnly", !ctx_r1.setting.numbersOnly)("ngStyle", ctx_r1.setting.inputStyles)("formControl", ctx_r1.otpForm.controls[item_r3]);
} }
function OtpInputComponent_div_0_span_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1("in ", ctx_r2.counter, " seconds.");
} }
function OtpInputComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 1);
    ɵngcc0.ɵɵtemplate(1, OtpInputComponent_div_0_input_1_Template, 1, 9, "input", 2);
    ɵngcc0.ɵɵpipe(2, "keys");
    ɵngcc0.ɵɵelementContainerStart(3, 3);
    ɵngcc0.ɵɵlistener("value", function OtpInputComponent_div_0_Template_ng_container_value_3_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.onCounterChange($event); });
    ɵngcc0.ɵɵelementStart(4, "div");
    ɵngcc0.ɵɵelementStart(5, "button", 4);
    ɵngcc0.ɵɵlistener("click", function OtpInputComponent_div_0_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r8); const ctx_r9 = ɵngcc0.ɵɵnextContext(); return ctx_r9.ressendOtp(); });
    ɵngcc0.ɵɵtext(6, " Resend OTP ");
    ɵngcc0.ɵɵtemplate(7, OtpInputComponent_div_0_span_7_Template, 2, 1, "span", 5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementContainerEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMapInterpolate1("otp-container ", ctx_r0.setting.wrapperClass, "");
    ɵngcc0.ɵɵpropertyInterpolate1("id", "c_", ctx_r0.componentKey, "");
    ɵngcc0.ɵɵproperty("ngStyle", ctx_r0.setting.wrapperStyles);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ɵngcc0.ɵɵpipeBind1(2, 12, ctx_r0.otpForm == null ? null : ctx_r0.otpForm.controls));
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("counter", ctx_r0.setting.timer);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵclassMapInterpolate1("btn ", ctx_r0.setting.btnClass, "");
    ɵngcc0.ɵɵproperty("disabled", ctx_r0.counter != 0);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r0.counter != 0);
} }
class KeysPipe {
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return Object.keys(value);
    }
}
KeysPipe.ɵfac = function KeysPipe_Factory(t) { return new (t || KeysPipe)(); };
KeysPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "keys", type: KeysPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KeysPipe, [{
        type: Pipe,
        args: [{
                name: 'keys'
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Setting {
}
if (false) {
    /** @type {?} */
    Setting.prototype.inputStyles;
    /** @type {?} */
    Setting.prototype.wrapperStyles;
    /** @type {?} */
    Setting.prototype.allowKeyCodes;
    /** @type {?} */
    Setting.prototype.length;
    /** @type {?} */
    Setting.prototype.numbersOnly;
    /** @type {?} */
    Setting.prototype.inputClass;
    /** @type {?} */
    Setting.prototype.wrapperClass;
    /** @type {?} */
    Setting.prototype.timer;
    /** @type {?} */
    Setting.prototype.btnClass;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CounterDirective {
    constructor() {
        this._counterSource$ = new Subject();
        this._subscription = Subscription.EMPTY;
        this.interval = 1000;
        this.value = new EventEmitter();
        this._subscription = this._counterSource$.pipe(switchMap((/**
         * @param {?} __0
         * @return {?}
         */
        ({ interval, count }) => timer(0, interval).pipe(take(count), tap((/**
         * @return {?}
         */
        () => this.value.emit(--count))))))).subscribe();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.startTimer();
    }
    /**
     * @return {?}
     */
    startTimer() {
        this._counterSource$.next({ count: this.counter, interval: this.interval });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._subscription.unsubscribe();
    }
}
CounterDirective.ɵfac = function CounterDirective_Factory(t) { return new (t || CounterDirective)(); };
CounterDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CounterDirective, selectors: [["", "counter", ""]], inputs: { counter: "counter" }, outputs: { value: "value" }, features: [ɵngcc0.ɵɵNgOnChangesFeature] });
/** @nocollapse */
CounterDirective.ctorParameters = () => [];
CounterDirective.propDecorators = {
    counter: [{ type: Input }],
    value: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CounterDirective, [{
        type: Directive,
        args: [{
                selector: '[counter]'
            }]
    }], function () { return []; }, { value: [{
            type: Output
        }], counter: [{
            type: Input
        }] }); })();
if (false) {
    /**
     * @type {?}
     * @private
     */
    CounterDirective.prototype._counterSource$;
    /**
     * @type {?}
     * @private
     */
    CounterDirective.prototype._subscription;
    /** @type {?} */
    CounterDirective.prototype.counter;
    /** @type {?} */
    CounterDirective.prototype.interval;
    /** @type {?} */
    CounterDirective.prototype.value;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class OtpInputComponent {
    /**
     * @param {?} keysPipe
     */
    constructor(keysPipe) {
        this.keysPipe = keysPipe;
        this.setting = {
            length: 4,
            timer: 0
        };
        this.onValueChange = new EventEmitter();
        this.inputControls = new Array(this.setting.length);
        this.componentKey = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.otpForm = new FormGroup({});
        for (let index = 0; index < this.setting.length; index++) {
            this.otpForm.addControl(this.getControlName(index), new FormControl());
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        let containerItem = document.getElementById(`c_${this.componentKey}`);
        if (containerItem) {
            /** @type {?} */
            let ele = containerItem.getElementsByClassName('.otp-input')[0];
            if (ele && ele.focus) {
                ele.focus();
            }
        }
    }
    /**
     * @private
     * @param {?} idx
     * @return {?}
     */
    getControlName(idx) {
        return `ctrl_${idx}`;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    isLeftArrow(e) {
        return this.isKeyCode(e, 37);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    isRightArrow(e) {
        return this.isKeyCode(e, 39);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    isBackspaceOrDelete(e) {
        return e.key === "Backspace" || e.key === "Delete" || this.isKeyCode(e, 8) || this.isKeyCode(e, 46);
    }
    /**
     * @param {?} e
     * @param {?} targetCode
     * @return {?}
     */
    isKeyCode(e, targetCode) {
        /** @type {?} */
        var key = e.keyCode || e.charCode;
        if (key == targetCode) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} e
     * @param {?} inputIdx
     * @return {?}
     */
    keyUp(e, inputIdx) {
        /** @type {?} */
        let nextInputId = this.appendKey(`otp_${inputIdx + 1}`);
        /** @type {?} */
        let prevInputId = this.appendKey(`otp_${inputIdx - 1}`);
        if (this.isRightArrow(e)) {
            this.setSelected(nextInputId);
            return;
        }
        if (this.isLeftArrow(e)) {
            this.setSelected(prevInputId);
            return;
        }
        /** @type {?} */
        let isBackspace = this.isBackspaceOrDelete(e);
        if (isBackspace && !e.target.value) {
            this.setSelected(prevInputId);
            this.rebuildValue();
            return;
        }
        if (!e.target.value) {
            return;
        }
        if (this.isValidEntry(e)) {
            this.focusTo(nextInputId);
        }
        this.rebuildValue();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    appendKey(id) {
        return `${id}_${this.componentKey}`;
    }
    /**
     * @param {?} eleId
     * @return {?}
     */
    setSelected(eleId) {
        this.focusTo(eleId);
        /** @type {?} */
        let ele = document.getElementById(eleId);
        if (ele && ele.setSelectionRange) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                ele.setSelectionRange(0, 1);
            }), 0);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    isValidEntry(e) {
        /** @type {?} */
        var inp = String.fromCharCode(e.keyCode);
        /** @type {?} */
        var isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);
        return isMobile || /[a-zA-Z0-9-_]/.test(inp) || (this.setting.allowKeyCodes && this.setting.allowKeyCodes.includes(e.keyCode)) || (e.keyCode >= 96 && e.keyCode <= 105);
    }
    /**
     * @param {?} eleId
     * @return {?}
     */
    focusTo(eleId) {
        /** @type {?} */
        let ele = document.getElementById(eleId);
        if (ele) {
            ele.focus();
            ele.selectionStart = ele.selectionEnd = 100;
        }
    }
    /**
     * @return {?}
     */
    rebuildValue() {
        /** @type {?} */
        let val = '';
        this.keysPipe.transform(this.otpForm.controls).forEach((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            if (this.otpForm.controls[k].value) {
                val += this.otpForm.controls[k].value;
            }
        }));
        this.onValueChange.emit(val);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onCounterChange(e) {
        this.counter = e;
        if (this.counter == 0) {
            this.onValueChange.emit(-1);
        }
    }
    /**
     * @return {?}
     */
    ressendOtp() {
        this.CounterDirective.first.startTimer();
        this.onValueChange.emit(-2);
    }
}
OtpInputComponent.ɵfac = function OtpInputComponent_Factory(t) { return new (t || OtpInputComponent)(ɵngcc0.ɵɵdirectiveInject(KeysPipe)); };
OtpInputComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: OtpInputComponent, selectors: [["otp"]], viewQuery: function OtpInputComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(CounterDirective, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.CounterDirective = _t);
    } }, inputs: { setting: "setting" }, outputs: { onValueChange: "onValueChange" }, decls: 1, vars: 1, consts: [[3, "class", "id", "ngStyle", 4, "ngIf"], [3, "id", "ngStyle"], ["numberOnly", "", "maxlength", "1", "autocomplete", "off", 3, "type", "disabledNumberOnly", "ngStyle", "class", "formControl", "id", "keyup", 4, "ngFor", "ngForOf"], ["counter", "", 3, "counter", "value"], [3, "disabled", "click"], [4, "ngIf"], ["numberOnly", "", "maxlength", "1", "autocomplete", "off", 3, "type", "disabledNumberOnly", "ngStyle", "formControl", "id", "keyup"]], template: function OtpInputComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, OtpInputComponent_div_0_Template, 8, 14, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.otpForm == null ? null : ctx.otpForm.controls);
    } }, directives: function () { return [ɵngcc1.NgIf, ɵngcc1.NgStyle, ɵngcc1.NgForOf, CounterDirective, ɵngcc2.DefaultValueAccessor, NumberOnly, ɵngcc2.MaxLengthValidator, ɵngcc2.NgControlStatus, ɵngcc2.FormControlDirective]; }, pipes: function () { return [KeysPipe]; }, styles: [".otp-input[_ngcontent-%COMP%]{width:2em;height:2em;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:28px}.otp-input[_ngcontent-%COMP%]:focus{outline-offset:0;outline:#2b91e2 auto 5px}.otp-container[_ngcontent-%COMP%]   .otp-input[_ngcontent-%COMP%]:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input[_ngcontent-%COMP%]{font-size:24px}}@media screen and (max-width:420px){.otp-input[_ngcontent-%COMP%]{font-size:18px}}"] });
/** @nocollapse */
OtpInputComponent.ctorParameters = () => [
    { type: KeysPipe }
];
OtpInputComponent.propDecorators = {
    setting: [{ type: Input }],
    onValueChange: [{ type: Output }],
    CounterDirective: [{ type: ViewChildren, args: [CounterDirective,] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(OtpInputComponent, [{
        type: Component,
        args: [{
                selector: 'otp',
                template: "<div class=\"otp-container {{setting.wrapperClass}}\" id=\"c_{{componentKey}}\" *ngIf=\"otpForm?.controls\"\n    [ngStyle]=\"setting.wrapperStyles\">\n    <input \n        [type]=\"setting.numbersOnly ? 'tel' : 'text'\" \n        numberOnly [disabledNumberOnly]=\"!setting.numbersOnly\"\n        [ngStyle]=\"setting.inputStyles\" \n        maxlength=\"1\" \n        class=\"otp-input {{setting.inputClass}}\" \n        autocomplete=\"off\"\n        *ngFor=\"let item of otpForm?.controls | keys; let i = index\" \n        [formControl]=\"otpForm.controls[item]\"\n        id=\"otp_{{i}}_{{componentKey}}\" \n        (keyup)=\"keyUp($event, i)\"\n    >\n    <ng-container counter [counter]=\"setting.timer\" (value)=\"onCounterChange($event)\">\n        <div>\n            <button class=\"btn {{setting.btnClass}}\" [disabled]=\"counter != 0\" (click)=\"ressendOtp()\">\n                Resend OTP <span *ngIf=\"counter != 0\">in {{ counter }} seconds.</span>\n            </button>\n        </div>\n    </ng-container>\n</div>",
                styles: [".otp-input{width:2em;height:2em;border-radius:4px;border:1px solid #c5c5c5;text-align:center;font-size:28px}.otp-input:focus{outline-offset:0;outline:#2b91e2 auto 5px}.otp-container .otp-input:not(:last-child){margin-right:8px}@media screen and (max-width:767px){.otp-input{font-size:24px}}@media screen and (max-width:420px){.otp-input{font-size:18px}}"]
            }]
    }], function () { return [{ type: KeysPipe }]; }, { setting: [{
            type: Input
        }], onValueChange: [{
            type: Output
        }], CounterDirective: [{
            type: ViewChildren,
            args: [CounterDirective]
        }] }); })();
if (false) {
    /** @type {?} */
    OtpInputComponent.prototype.setting;
    /** @type {?} */
    OtpInputComponent.prototype.onValueChange;
    /** @type {?} */
    OtpInputComponent.prototype.CounterDirective;
    /** @type {?} */
    OtpInputComponent.prototype.otpForm;
    /** @type {?} */
    OtpInputComponent.prototype.inputControls;
    /** @type {?} */
    OtpInputComponent.prototype.componentKey;
    /** @type {?} */
    OtpInputComponent.prototype.counter;
    /**
     * @type {?}
     * @private
     */
    OtpInputComponent.prototype.keysPipe;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberOnly {
    /**
     * @param {?} _elRef
     * @param {?} _renderer
     */
    constructor(_elRef, _renderer) {
        this._elRef = _elRef;
        this._renderer = _renderer;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.disabledNumberOnly) {
            this._renderer.setAttribute(this._elRef.nativeElement, 'onkeypress', 'return (event.charCode >= 48 && event.charCode <= 57) || event.charCode == 0');
        }
    }
}
NumberOnly.ɵfac = function NumberOnly_Factory(t) { return new (t || NumberOnly)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
NumberOnly.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: NumberOnly, selectors: [["", "numberOnly", ""]], inputs: { disabledNumberOnly: "disabledNumberOnly" } });
/** @nocollapse */
NumberOnly.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
NumberOnly.propDecorators = {
    disabledNumberOnly: [{ type: Input }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NumberOnly, [{
        type: Directive,
        args: [{
                selector: '[numberOnly]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { disabledNumberOnly: [{
            type: Input
        }] }); })();
if (false) {
    /** @type {?} */
    NumberOnly.prototype.disabledNumberOnly;
    /**
     * @type {?}
     * @private
     */
    NumberOnly.prototype._elRef;
    /**
     * @type {?}
     * @private
     */
    NumberOnly.prototype._renderer;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularOtpLibModule {
}
AngularOtpLibModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: AngularOtpLibModule });
AngularOtpLibModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function AngularOtpLibModule_Factory(t) { return new (t || AngularOtpLibModule)(); }, providers: [KeysPipe], imports: [[
            CommonModule,
            FormsModule,
            ReactiveFormsModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(AngularOtpLibModule, { declarations: function () { return [OtpInputComponent,
        KeysPipe,
        NumberOnly,
        CounterDirective]; }, imports: function () { return [CommonModule,
        FormsModule,
        ReactiveFormsModule]; }, exports: function () { return [OtpInputComponent]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AngularOtpLibModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    OtpInputComponent,
                    KeysPipe,
                    NumberOnly,
                    CounterDirective
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                exports: [
                    OtpInputComponent
                ],
                providers: [KeysPipe]
            }]
    }], null, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AngularOtpLibModule, OtpInputComponent, CounterDirective as ɵa, KeysPipe as ɵb, NumberOnly as ɵc };

//# sourceMappingURL=angular-otp-box.js.map