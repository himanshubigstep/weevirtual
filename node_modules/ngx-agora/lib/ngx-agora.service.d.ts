import { AgoraClient } from './data/models/agora-client.model';
import { AgoraConfig } from './data/models/agora-config.model';
import { AgoraRTC, ClientConfig, MediaDeviceInfo, Stream, StreamSpec } from './data/models';
/**
 * Provides access to the Agora web API, including the AgoraRTC and Client objects.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NgxAgoraService {
    private config;
    private static AgoraRTC;
    /**
     * The local Agora.io Client object.
     * @see [Web Client](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.client.html)
     */
    client: AgoraClient;
    /**
     * All audio devices collected from the AgoraRTC `getDevices()` method.
     * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)
     *
     */
    audioDevices: MediaDeviceInfo[];
    /**
     * All video devices collected from the AgoraRTC `getDevices()` method.
     * @see [getDevices()](https://docs.agora.io/en/Video/API%20Reference/web/globals.html#getdevices)
     */
    videoDevices: MediaDeviceInfo[];
    /**
     * Instance reference to the `static` AgoraRTC library object.
     */
    AgoraRTC: AgoraRTC;
    constructor(config: AgoraConfig);
    /**
     * Checks the Web Browser Compatibility
     *
     * This method checks the compatibility between the Web SDK and the current web browser.
     * Use this method before calling createClient to check the compatibility between the system and the web browser.
     *
     * - true: The Web SDK is compatible with the current web browser.
     * - false: The Web SDK is not compatible with the current web browser.
     *
     * @remark
     * Agora has yet to conduct comprehensive tests on Chromium kernel browsers, such as QQ and 360.
     * Agora will gradually achieve compatibility on most mainstream browsers in subsequent versions of the Web SDK.
     */
    checkSystemRequirements(): boolean;
    /**
     * Creates a Client object.
     *
     * This method creates and returns a client object. You can only call this method once each call session.
     *
     * @param config
     * Defines the property of the client, see
     * [ClientConfig](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.clientconfig.html) for details.
     * @param [autoInitializing=true] Ngx-agora by default automatically initializes the client with the provided `AppID` after it is created.
     * Set this property to `false` to disable this functionality, if you are going to call `init()` separately
     * (after creating the client only).
     * @param [onSuccess] The callback when the method succeeds.
     * @param [onFailure] The callback when the method fails.
     *
     * @example
     * AgoraRTC.createClient(config);
     */
    createClient(config: ClientConfig, autoInitializing?: boolean, onSuccess?: () => void, onFailure?: (error: Error) => void): AgoraClient;
    /**
     * This method creates and returns a stream object.
     *
     * @example
     * AgoraRTC.createStream(spec)
     *
     * @param spec Defines the properties of the stream
     * @see [StreamSpec](https://docs.agora.io/en/Video/API%20Reference/web/interfaces/agorartc.streamspec.html) for details.
     */
    createStream(spec: StreamSpec): Stream;
    /**
     * Initializes the Client object.
     *
     * @param appId Pass in the App ID for your project.
     * ASCII characters only, and the string length must be greater than 0 and less than 256 bytes.
     * To get your App ID,
     * @see [Get an App ID](https://docs.agora.io/en/Video/web_prepare?platform=Web#create-an-agora-account-and-get-an-app-id).
     * @param [onSuccess] The callback when the method succeeds.
     * @param [onFailure] The callback when the method fails.
     *
     * @example
     * this.ngxAgoraService.client.init(appId, () => {
     * console.log("client initialized");
     * // Join a channel
     * //……
     * }, error => {
     *     console.log("client init failed ", err);
     *     // Error handling
     * });
     */
    init(appId: string, onSuccess?: () => void, onFailure?: (error: Error) => void): void;
    /**
     * Attempts to automatically collect audio and video devices from the AgoraRTC `getDevices()` method.
     */
    private collectDevices;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NgxAgoraService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NgxAgoraService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWFnb3JhLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsibmd4LWFnb3JhLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWdvcmFDbGllbnQgfSBmcm9tICcuL2RhdGEvbW9kZWxzL2Fnb3JhLWNsaWVudC5tb2RlbCc7XG5pbXBvcnQgeyBBZ29yYUNvbmZpZyB9IGZyb20gJy4vZGF0YS9tb2RlbHMvYWdvcmEtY29uZmlnLm1vZGVsJztcbmltcG9ydCB7IEFnb3JhUlRDLCBDbGllbnRDb25maWcsIE1lZGlhRGV2aWNlSW5mbywgU3RyZWFtLCBTdHJlYW1TcGVjIH0gZnJvbSAnLi9kYXRhL21vZGVscyc7XG4vKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgQWdvcmEgd2ViIEFQSSwgaW5jbHVkaW5nIHRoZSBBZ29yYVJUQyBhbmQgQ2xpZW50IG9iamVjdHMuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5neEFnb3JhU2VydmljZSB7XG4gICAgcHJpdmF0ZSBjb25maWc7XG4gICAgcHJpdmF0ZSBzdGF0aWMgQWdvcmFSVEM7XG4gICAgLyoqXG4gICAgICogVGhlIGxvY2FsIEFnb3JhLmlvIENsaWVudCBvYmplY3QuXG4gICAgICogQHNlZSBbV2ViIENsaWVudF0oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5jbGllbnQuaHRtbClcbiAgICAgKi9cbiAgICBjbGllbnQ6IEFnb3JhQ2xpZW50O1xuICAgIC8qKlxuICAgICAqIEFsbCBhdWRpbyBkZXZpY2VzIGNvbGxlY3RlZCBmcm9tIHRoZSBBZ29yYVJUQyBgZ2V0RGV2aWNlcygpYCBtZXRob2QuXG4gICAgICogQHNlZSBbZ2V0RGV2aWNlcygpXShodHRwczovL2RvY3MuYWdvcmEuaW8vZW4vVmlkZW8vQVBJJTIwUmVmZXJlbmNlL3dlYi9nbG9iYWxzLmh0bWwjZ2V0ZGV2aWNlcylcbiAgICAgKlxuICAgICAqL1xuICAgIGF1ZGlvRGV2aWNlczogTWVkaWFEZXZpY2VJbmZvW107XG4gICAgLyoqXG4gICAgICogQWxsIHZpZGVvIGRldmljZXMgY29sbGVjdGVkIGZyb20gdGhlIEFnb3JhUlRDIGBnZXREZXZpY2VzKClgIG1ldGhvZC5cbiAgICAgKiBAc2VlIFtnZXREZXZpY2VzKCldKGh0dHBzOi8vZG9jcy5hZ29yYS5pby9lbi9WaWRlby9BUEklMjBSZWZlcmVuY2Uvd2ViL2dsb2JhbHMuaHRtbCNnZXRkZXZpY2VzKVxuICAgICAqL1xuICAgIHZpZGVvRGV2aWNlczogTWVkaWFEZXZpY2VJbmZvW107XG4gICAgLyoqXG4gICAgICogSW5zdGFuY2UgcmVmZXJlbmNlIHRvIHRoZSBgc3RhdGljYCBBZ29yYVJUQyBsaWJyYXJ5IG9iamVjdC5cbiAgICAgKi9cbiAgICBBZ29yYVJUQzogQWdvcmFSVEM7XG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBBZ29yYUNvbmZpZyk7XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBXZWIgQnJvd3NlciBDb21wYXRpYmlsaXR5XG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjaGVja3MgdGhlIGNvbXBhdGliaWxpdHkgYmV0d2VlbiB0aGUgV2ViIFNESyBhbmQgdGhlIGN1cnJlbnQgd2ViIGJyb3dzZXIuXG4gICAgICogVXNlIHRoaXMgbWV0aG9kIGJlZm9yZSBjYWxsaW5nIGNyZWF0ZUNsaWVudCB0byBjaGVjayB0aGUgY29tcGF0aWJpbGl0eSBiZXR3ZWVuIHRoZSBzeXN0ZW0gYW5kIHRoZSB3ZWIgYnJvd3Nlci5cbiAgICAgKlxuICAgICAqIC0gdHJ1ZTogVGhlIFdlYiBTREsgaXMgY29tcGF0aWJsZSB3aXRoIHRoZSBjdXJyZW50IHdlYiBicm93c2VyLlxuICAgICAqIC0gZmFsc2U6IFRoZSBXZWIgU0RLIGlzIG5vdCBjb21wYXRpYmxlIHdpdGggdGhlIGN1cnJlbnQgd2ViIGJyb3dzZXIuXG4gICAgICpcbiAgICAgKiBAcmVtYXJrXG4gICAgICogQWdvcmEgaGFzIHlldCB0byBjb25kdWN0IGNvbXByZWhlbnNpdmUgdGVzdHMgb24gQ2hyb21pdW0ga2VybmVsIGJyb3dzZXJzLCBzdWNoIGFzIFFRIGFuZCAzNjAuXG4gICAgICogQWdvcmEgd2lsbCBncmFkdWFsbHkgYWNoaWV2ZSBjb21wYXRpYmlsaXR5IG9uIG1vc3QgbWFpbnN0cmVhbSBicm93c2VycyBpbiBzdWJzZXF1ZW50IHZlcnNpb25zIG9mIHRoZSBXZWIgU0RLLlxuICAgICAqL1xuICAgIGNoZWNrU3lzdGVtUmVxdWlyZW1lbnRzKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIENsaWVudCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBjcmVhdGVzIGFuZCByZXR1cm5zIGEgY2xpZW50IG9iamVjdC4gWW91IGNhbiBvbmx5IGNhbGwgdGhpcyBtZXRob2Qgb25jZSBlYWNoIGNhbGwgc2Vzc2lvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjb25maWdcbiAgICAgKiBEZWZpbmVzIHRoZSBwcm9wZXJ0eSBvZiB0aGUgY2xpZW50LCBzZWVcbiAgICAgKiBbQ2xpZW50Q29uZmlnXShodHRwczovL2RvY3MuYWdvcmEuaW8vZW4vVmlkZW8vQVBJJTIwUmVmZXJlbmNlL3dlYi9pbnRlcmZhY2VzL2Fnb3JhcnRjLmNsaWVudGNvbmZpZy5odG1sKSBmb3IgZGV0YWlscy5cbiAgICAgKiBAcGFyYW0gW2F1dG9Jbml0aWFsaXppbmc9dHJ1ZV0gTmd4LWFnb3JhIGJ5IGRlZmF1bHQgYXV0b21hdGljYWxseSBpbml0aWFsaXplcyB0aGUgY2xpZW50IHdpdGggdGhlIHByb3ZpZGVkIGBBcHBJRGAgYWZ0ZXIgaXQgaXMgY3JlYXRlZC5cbiAgICAgKiBTZXQgdGhpcyBwcm9wZXJ0eSB0byBgZmFsc2VgIHRvIGRpc2FibGUgdGhpcyBmdW5jdGlvbmFsaXR5LCBpZiB5b3UgYXJlIGdvaW5nIHRvIGNhbGwgYGluaXQoKWAgc2VwYXJhdGVseVxuICAgICAqIChhZnRlciBjcmVhdGluZyB0aGUgY2xpZW50IG9ubHkpLlxuICAgICAqIEBwYXJhbSBbb25TdWNjZXNzXSBUaGUgY2FsbGJhY2sgd2hlbiB0aGUgbWV0aG9kIHN1Y2NlZWRzLlxuICAgICAqIEBwYXJhbSBbb25GYWlsdXJlXSBUaGUgY2FsbGJhY2sgd2hlbiB0aGUgbWV0aG9kIGZhaWxzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBBZ29yYVJUQy5jcmVhdGVDbGllbnQoY29uZmlnKTtcbiAgICAgKi9cbiAgICBjcmVhdGVDbGllbnQoY29uZmlnOiBDbGllbnRDb25maWcsIGF1dG9Jbml0aWFsaXppbmc/OiBib29sZWFuLCBvblN1Y2Nlc3M/OiAoKSA9PiB2b2lkLCBvbkZhaWx1cmU/OiAoZXJyb3I6IEVycm9yKSA9PiB2b2lkKTogQWdvcmFDbGllbnQ7XG4gICAgLyoqXG4gICAgICogVGhpcyBtZXRob2QgY3JlYXRlcyBhbmQgcmV0dXJucyBhIHN0cmVhbSBvYmplY3QuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIEFnb3JhUlRDLmNyZWF0ZVN0cmVhbShzcGVjKVxuICAgICAqXG4gICAgICogQHBhcmFtIHNwZWMgRGVmaW5lcyB0aGUgcHJvcGVydGllcyBvZiB0aGUgc3RyZWFtXG4gICAgICogQHNlZSBbU3RyZWFtU3BlY10oaHR0cHM6Ly9kb2NzLmFnb3JhLmlvL2VuL1ZpZGVvL0FQSSUyMFJlZmVyZW5jZS93ZWIvaW50ZXJmYWNlcy9hZ29yYXJ0Yy5zdHJlYW1zcGVjLmh0bWwpIGZvciBkZXRhaWxzLlxuICAgICAqL1xuICAgIGNyZWF0ZVN0cmVhbShzcGVjOiBTdHJlYW1TcGVjKTogU3RyZWFtO1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBDbGllbnQgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcElkIFBhc3MgaW4gdGhlIEFwcCBJRCBmb3IgeW91ciBwcm9qZWN0LlxuICAgICAqIEFTQ0lJIGNoYXJhY3RlcnMgb25seSwgYW5kIHRoZSBzdHJpbmcgbGVuZ3RoIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAgYW5kIGxlc3MgdGhhbiAyNTYgYnl0ZXMuXG4gICAgICogVG8gZ2V0IHlvdXIgQXBwIElELFxuICAgICAqIEBzZWUgW0dldCBhbiBBcHAgSURdKGh0dHBzOi8vZG9jcy5hZ29yYS5pby9lbi9WaWRlby93ZWJfcHJlcGFyZT9wbGF0Zm9ybT1XZWIjY3JlYXRlLWFuLWFnb3JhLWFjY291bnQtYW5kLWdldC1hbi1hcHAtaWQpLlxuICAgICAqIEBwYXJhbSBbb25TdWNjZXNzXSBUaGUgY2FsbGJhY2sgd2hlbiB0aGUgbWV0aG9kIHN1Y2NlZWRzLlxuICAgICAqIEBwYXJhbSBbb25GYWlsdXJlXSBUaGUgY2FsbGJhY2sgd2hlbiB0aGUgbWV0aG9kIGZhaWxzLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB0aGlzLm5neEFnb3JhU2VydmljZS5jbGllbnQuaW5pdChhcHBJZCwgKCkgPT4ge1xuICAgICAqIGNvbnNvbGUubG9nKFwiY2xpZW50IGluaXRpYWxpemVkXCIpO1xuICAgICAqIC8vIEpvaW4gYSBjaGFubmVsXG4gICAgICogLy/igKbigKZcbiAgICAgKiB9LCBlcnJvciA9PiB7XG4gICAgICogICAgIGNvbnNvbGUubG9nKFwiY2xpZW50IGluaXQgZmFpbGVkIFwiLCBlcnIpO1xuICAgICAqICAgICAvLyBFcnJvciBoYW5kbGluZ1xuICAgICAqIH0pO1xuICAgICAqL1xuICAgIGluaXQoYXBwSWQ6IHN0cmluZywgb25TdWNjZXNzPzogKCkgPT4gdm9pZCwgb25GYWlsdXJlPzogKGVycm9yOiBFcnJvcikgPT4gdm9pZCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQXR0ZW1wdHMgdG8gYXV0b21hdGljYWxseSBjb2xsZWN0IGF1ZGlvIGFuZCB2aWRlbyBkZXZpY2VzIGZyb20gdGhlIEFnb3JhUlRDIGBnZXREZXZpY2VzKClgIG1ldGhvZC5cbiAgICAgKi9cbiAgICBwcml2YXRlIGNvbGxlY3REZXZpY2VzO1xufVxuIl19